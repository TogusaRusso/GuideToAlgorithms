public class BST <Key extends Comparable<Key>, Value> {
  private class Node {
    private Key key;
    private Value val;
    private Node left, right;
  
    public Node(Key key, Value val)
    {
      this.key = key;
      this.val = val;
    }
  }
  
  private Node root;
  private int N;
  
  BST() {
    root = null;
    N = 0;
  }
           void put(Key key, Value val) {}
           
  Value get(Key key) {
    Node x = root;
    while (x != null) {
      int cmp = key.compareTo(x.key);
      if      (cmp < 0) x = x.left;
      else if (cmp > 0) x = x.right;
      else              return x.val; // if (cmp == 0)
    }
    return null;
  }
            
          }
           void delete(Key key) { put(key, null); }
        boolean contains(Key key) { return get(key) != null; }
        boolean isEmpty() {}

  int size() {
    return N;
  }
  
            Key min() {}
            Key max() {}
            Key floor(Key key) {}
            Key ceiling(Key key) {}
            int rank(Key key) {}
            Key select(int k) {}
           void deleteMin() {}
           void deleteMax() {}
            int size(Key lo, Key hi) {}
  Iterable<key> keys(Key lo, Key hi) {}
  Iterable<key> keys() {}
}
    
  