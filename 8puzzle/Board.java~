public class Board {
  private int[] board;
  private int N;
  public Board(int[][] blocks) {           // construct a board from an N-by-N array of blocks
    N = blocks.length;                     // (where blocks[i][j] = block in row i, column j)
    board = new int[N * N];
    for (int i = 0; i < N; i++)
      for (int j = 0; j < N; j++)
        board[i * N + j] = blocks[i][j];
  }

  public int dimension() {                 // board dimension N
    return N;
  }
  public int hamming() {                   // number of blocks out of place
    int count = 0;
    for (int i = 0; i < N * N; i++)
      if (board[i] > 0 && board[i] != (i + 1))
        count++;
    return count;
  }
  public int manhattan()                 // sum of Manhattan distances between blocks and goal
  public boolean isGoal()                // is this board the goal board?
  public Board twin()                    // a board that is obtained by exchanging two adjacent blocks in the same row
  public boolean equals(Object y)        // does this board equal y?
  public Iterable<Board> neighbors()     // all neighboring boards
  public String toString()               // string representation of this board (in the output format specified below)
    
  public static void main(String[] args) {// unit tests (not graded)
  }
}