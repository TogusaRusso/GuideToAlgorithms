public class BinaryHeapPQ <Key extends Comparable<Key>> {
  private Key[] pq;
  private int N;
  
  @SuppressWarnings("unchecked")
  public UnorderedMaxPQ(int capacity)  {
    pq = (Key[]) new Comparable[capacity];
  }
  
  public boolean isEmpty() {
    return N == 0;
  }
  
  public void insert(Key x) {
    pq[++N] = x;
    swim(N);
  }
  
  public Key delMax() {
    int max = 0;
    for (int i = 1; i < N; i++)
      if (less(max, i)) max = i;
    exch(max, N - 1);
    return pq[--N];
  }
  
  private void swim(int k) {
    while (k > 1 && less(k / 2, k)) {
      exch(k, k / 2);
      k = k / 2;
    }
  }
  
  private void exch(int i, int j) {
    Key swap = pq[i];
    pq[i] = pq[j];
    pq[j] = swap;
  }

  private boolean less(int i, int  j) {
    return  pq[i].compareTo(pq[j]) < 0;
  }
}
  